import { NextRequest, NextResponse } from 'next/server';
import { adminDb } from '@/lib/firebase/admin';
import { getAuthFromRequest } from '@/lib/auth/server-auth';
import { TicketEmailService } from '@/lib/email/ticket-email-service';

export async function POST(
  request: NextRequest,
  { params }: { params: { ticketId: string } }
) {
  try {
    const { ticketId } = params;
    const { autoGenerated } = await request.json().catch(() => ({ autoGenerated: false }));

    console.log('üé´ Generating PDF for ticket:', ticketId, autoGenerated ? '(auto)' : '(manual)');

    // 1. Verificar autenticaci√≥n
    const authUser = await getAuthFromRequest(request);
    if (!authUser) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // 2. Obtener ticket de la base de datos
    const ticketDoc = await adminDb.collection('tickets').doc(ticketId).get();
    
    if (!ticketDoc.exists) {
      return NextResponse.json({ error: 'Ticket not found' }, { status: 404 });
    }

    const ticketData = ticketDoc.data()!;

    // 3. Verificar permisos
    const isAdmin = authUser.roles?.includes('admin') || authUser.roles?.includes('gestor');
    const isOwner = ticketData.user_id === authUser.uid || 
                   ticketData.customer_email === authUser.email;

    if (!isAdmin && !isOwner) {
      return NextResponse.json({ 
        error: 'Forbidden - You can only generate PDFs for your own tickets' 
      }, { status: 403 });
    }

    // 4. Verificar que el ticket est√° configurado
    if (!ticketData.attendee_name || !ticketData.customer_email) {
      return NextResponse.json({ 
        error: 'Ticket not configured. Please set attendee name and email first.' 
      }, { status: 400 });
    }

    // 5. Obtener datos del evento y tipo de boleto
    const [eventDoc, ticketTypeDoc] = await Promise.all([
      adminDb.collection('events').doc(ticketData.event_id).get(),
      adminDb.collection('ticket_types').doc(ticketData.ticket_type_id).get()
    ]);

    if (!eventDoc.exists || !ticketTypeDoc.exists) {
      return NextResponse.json({ 
        error: 'Event or ticket type not found' 
      }, { status: 404 });
    }

    const eventData = eventDoc.data()!;
    const ticketTypeData = ticketTypeDoc.data()!;

    // 6. Preparar ticket completo
    const completeTicket = {
      ...ticketData,
      id: ticketId,
      event: {
        ...eventData,
        start_date: eventData.start_date?.toDate() || new Date(),
        end_date: eventData.end_date?.toDate() || new Date(),
      },
      ticket_type: ticketTypeData
    };

    // 7. Generar PDF y enviar email
    const ticketEmailService = new TicketEmailService();
    const { pdf_url, pdf_path } = await ticketEmailService.generateAndSendTicket(
      completeTicket,
      completeTicket.event,
      ticketTypeData
    );

    // 8. Actualizar ticket en base de datos
    const updateData: any = {
      pdf_url,
      pdf_path,
      status: 'generated',
      updated_at: new Date()
    };

    // Marcar si fue generaci√≥n autom√°tica
    if (autoGenerated) {
      updateData.auto_generated_at = new Date();
    } else {
      updateData.manual_generated_by = authUser.uid;
      updateData.manual_generated_at = new Date();
    }

    await adminDb.collection('tickets').doc(ticketId).update(updateData);

    console.log('‚úÖ PDF generated and email sent successfully');

    return NextResponse.json({
      success: true,
      message: 'PDF generated and email sent successfully',
      pdf_url,
      pdf_path,
      email_sent_to: ticketData.customer_email
    });

  } catch (error) {
    console.error('‚ùå Error generating PDF:', error);
    
    return NextResponse.json(
      { 
        error: 'Failed to generate PDF',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

// GET para obtener info del PDF existente
export async function GET(
  request: NextRequest,
  { params }: { params: { ticketId: string } }
) {
  try {
    const { ticketId } = params;

    // 1. Verificar autenticaci√≥n
    const authUser = await getAuthFromRequest(request);
    if (!authUser) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // 2. Obtener ticket
    const ticketDoc = await adminDb.collection('tickets').doc(ticketId).get();
    
    if (!ticketDoc.exists) {
      return NextResponse.json({ error: 'Ticket not found' }, { status: 404 });
    }

    const ticketData = ticketDoc.data()!;

    // 3. Verificar permisos
    const isAdmin = authUser.roles?.includes('admin') || authUser.roles?.includes('gestor');
    const isOwner = ticketData.user_id === authUser.uid || 
                   ticketData.customer_email === authUser.email;

    if (!isAdmin && !isOwner) {
      return NextResponse.json({ 
        error: 'Forbidden - You can only access your own tickets' 
      }, { status: 403 });
    }

    // 4. Verificar que existe PDF
    if (!ticketData.pdf_url) {
      return NextResponse.json({ 
        error: 'PDF not generated yet. Please generate first.' 
      }, { status: 404 });
    }

    return NextResponse.json({
      success: true,
      pdf_url: ticketData.pdf_url,
      pdf_path: ticketData.pdf_path,
      qr_id: ticketData.qr_id,
      generated_at: ticketData.updated_at
    });

  } catch (error) {
    console.error('‚ùå Error getting PDF:', error);
    
    return NextResponse.json(
      { error: 'Failed to get PDF' },
      { status: 500 }
    );
  }
}
