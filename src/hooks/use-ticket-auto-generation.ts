import { useState } from 'react';
import { authenticatedPost, authenticatedPut } from '@/lib/utils/api';

export function useTicketAutoGeneration() {
  const [isGenerating, setIsGenerating] = useState(false);

  const triggerAutoGeneration = async (ticketId: string, attendeeData?: any) => {
    if (isGenerating) return;

    try {
      setIsGenerating(true);
      console.log('🤖 Triggering auto-generation for ticket:', ticketId);

      // 1. Si hay datos del asistente, guardarlos primero
      if (attendeeData) {
        console.log('📋 Saving attendee data first...');
        const saveResponse = await authenticatedPut(`/api/tickets/${ticketId}`, attendeeData); // ✅ PUT en lugar de POST
        
        if (!saveResponse.ok) {
          console.error('❌ Failed to save attendee data');
          return null;
        }
        
        console.log('✅ Attendee data saved, now generating PDF...');
      }

      // 2. Llamar API con flag autoGenerated
      const response = await authenticatedPost(`/api/tickets/${ticketId}/generate-pdf`, {
        autoGenerated: true
      });

      if (response.ok) {
        const result = await response.json();
        console.log('✅ Auto-generation successful:', result);
        return result;
      } else {
        const error = await response.json();
        console.error('❌ Auto-generation failed:', error);
        return null;
      }

    } catch (error) {
      console.error('❌ Error in auto-generation:', error);
      // No lanzar error - la auto-generación es silenciosa
      return null;
    } finally {
      setIsGenerating(false);
    }
  };

  return {
    triggerAutoGeneration,
    isGenerating
  };
}
